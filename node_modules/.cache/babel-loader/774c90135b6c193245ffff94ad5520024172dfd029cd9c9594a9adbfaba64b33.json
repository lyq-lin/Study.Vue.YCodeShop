{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"请登录\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = {\n  class: \"phone-number\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"pwssword\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_input, {\n    modelValue: $setup.loginModel.phoneNumber,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.loginModel.phoneNumber = $event),\n    placeholder: \"请输入手机号码\",\n    size: \"large\"\n  }, null, 8 /* PROPS */, [\"modelValue\"])]), $setup.isPwdOrCode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode(_component_el_input, {\n    modelValue: _ctx.loginMode.password,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.loginMode.password = $event),\n    type: \"password\",\n    placeholder: \"请输入密码\",\n    size: \"large\",\n    \"show-password\": \"\"\n  }, null, 8 /* PROPS */, [\"modelValue\"])])) : _createCommentVNode(\"v-if\", true)])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_el_input","$setup","loginModel","phoneNumber","$event","placeholder","size","isPwdOrCode","_createElementBlock","_hoisted_4","_ctx","loginMode","password","type"],"sources":["D:\\PersonalFile\\WebStudy\\myShop-vue\\myshop-vue\\src\\pages\\Login\\Login.vue"],"sourcesContent":["<template>\r\n  <h2>请登录</h2>\r\n\r\n  <div class=\"container\">\r\n    <div class=\"phone-number\">\r\n      <el-input v-model=\"loginModel.phoneNumber\" placeholder=\"请输入手机号码\" size=\"large\" />\r\n    </div>\r\n    <div class=\"pwssword\" v-if=\"isPwdOrCode\">\r\n    <el-input v-model=\"loginMode.password\" type=\"password\" placeholder=\"请输入密码\" size=\"large\" show-password />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport useUser from '@/stores/useUser'\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport jwt_decode from \"jwt-decode\"\r\nimport useAuthenticationState from '@/hook/auth/useAuthenticationState';\r\n\r\nconst isPwdOrCode = ref(true);\r\nconst User = useUser();\r\nconst router = useRouter();\r\n\r\nconst loginModel = reactive({\r\n  phoneNumer: \"\",\r\n  password: \"\",\r\n  code: \"\"\r\n})\r\n\r\nonMounted(async () => {\r\n  const isAuth = ref(useAuthenticationState());\r\n  if (isAuth.value.state) {\r\n    router.push({\r\n      path: '/product/feature'\r\n    })\r\n  }\r\n})\r\n\r\nfunction ToCodeLogin() {\r\n  isPwdOrCode.value = !isPwdOrCode.value\r\n}\r\n\r\nasync function getCode(phone) {\r\n  await User.getCode(phone);\r\n}\r\n\r\nasync function login() {\r\n  const result = ref(false);\r\n\r\n  if (isPwdOrCode.value) {\r\n    result.value = await User.loginByPassword(loginModel.phoneNumer, loginModel.password);\r\n  } else {\r\n    result.value = await User.loginByCode(loginModel.phoneNumer, loginModel.code);\r\n  }\r\n\r\n  if (result.value === true) {\r\n    const jwtPayload = localStorage.getItem(\"authToken\");\r\n    const decodeJwt = jwt_decode(jwtPayload);\r\n\r\n    User.user.userId = decodeJwt[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"];\r\n    User.user.userName = decodeJwt[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"];\r\n    User.user.userRole = decodeJwt[\"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"];\r\n    User.user.jwtVersion = decodeJwt[\"JwtVersion\"];\r\n    User.user.exp = decodeJwt[\"exp\"];\r\n\r\n    router.push({\r\n      path: '/product/feature'\r\n    })\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped></style>"],"mappings":";gCACEA,mBAAA,CAAY,YAAR,KAAG;;EAEFC,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAc;;;EAGpBA,KAAK,EAAC;;;;6DANbC,UAAY,EAEZF,mBAAA,CAOM,OAPNG,UAOM,GANJH,mBAAA,CAEM,OAFNI,UAEM,GADJC,YAAA,CAAgFC,mBAAA;gBAA7DC,MAAA,CAAAC,UAAU,CAACC,WAAW;+DAAtBF,MAAA,CAAAC,UAAU,CAACC,WAAW,GAAAC,MAAA;IAAEC,WAAW,EAAC,SAAS;IAACC,IAAI,EAAC;6CAE5CL,MAAA,CAAAM,WAAW,I,cAAvCC,mBAAA,CAEM,OAFNC,UAEM,GADNV,YAAA,CAAwGC,mBAAA;gBAArFU,IAAA,CAAAC,SAAS,CAACC,QAAQ;+DAAlBF,IAAA,CAAAC,SAAS,CAACC,QAAQ,GAAAR,MAAA;IAAES,IAAI,EAAC,UAAU;IAACR,WAAW,EAAC,OAAO;IAACC,IAAI,EAAC,OAAO;IAAC,eAAa,EAAb"},"metadata":{},"sourceType":"module","externalDependencies":[]}